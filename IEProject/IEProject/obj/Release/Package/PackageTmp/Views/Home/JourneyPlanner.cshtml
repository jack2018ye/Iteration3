@model IEProject.Models.PublicToiletForm
@Styles.Render("~/Content/leaflet.css")

@{
    ViewBag.Title = "JourneyPlanner";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/Content/ServicePage.css" rel="stylesheet" />
<link href="~/Content/pace-theme-flat-top.css" rel="stylesheet" />
<link  href="http://code.ionicframework.com/ionicons/1.5.2/css/ionicons.min.css" rel="stylesheet">
<link href="http://netdna.bootstrapcdn.com/font-awesome/4.0.0/css/font-awesome.css" rel="stylesheet">
<link rel="stylesheet" href="~/Content/leaflet.awesome-markers.css">
<style>
    #mapid {
        height: 550px;
        width: 985px;
        position: relative;
        left: 22px;
    
    }
</style>
<body>

    <div class="container">

        <div class="jumbotron" style="background-color:transparent;padding-top:10px">
          

            
            <span style="color:white;font-size:45px;padding-top:0px;padding-bottom:0px;padding-left:3px;padding-right:3px">
                Find Services 
            </span>

            @using (Html.BeginForm("JourneyPlanner", "Home", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                <div class="img-responsive" style="margin-bottom:30px">
                <div class="container"  id="content2">
                    <div class="form-group">
                        <div class="panel panel-default">
                            <div class="panel-body">
                               


                                <div class="col-md-10">
                                    <div>
                                        <h5>
                                            Where are you going?
                                        </h5>
                                    </div>
                                    @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" ,@placeholder="Enter your destination in Melbourne city"} })
                                    <div style="background-color:white;margin-top:15px;padding-left:15px">
                                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <br />

                                <div class="container" style="font-size:15px">
                                    <form></form>

                                    <div class="parent">
                                        <div class="col-sm-4">
                                            <h6 style="color:black">How are you travelling?</h6>
                                            <hr />

                                            <div style="color:black">
                                                @Html.CheckBoxFor(m => m.cartick)
                                                @Html.Label("Car")
                                            </div>

                                            <div style="color:black">


                                                @Html.CheckBoxFor(m => m.traintick)
                                                @Html.Label("Train")
                                            </div>
                                        </div>


                                        <div class="col-md-3">

                                            <h6 style="color:black">Gettting food or drinks?</h6>
                                            <hr />
                                            <div id="others">
                                                <div style="color:black">
                                                    @Html.CheckBoxFor(m => m.barselect)
                                                    @Html.Label("Pubs, Taverns and Bars")

                                                </div>
                                                <div style="color:black">
                                                    @Html.CheckBoxFor(m => m.cafeselect)
                                                    @Html.Label("Cafes and Restaurants")

                                                </div>

                                            </div>
                                        </div>
                                        <div class="col-md-5">
                                            <h6 style="color:black">Thinking to use a service?</h6>
                                            <hr />
                                            <div style="color:black">
                                                @Html.CheckBoxFor(m => m.toilettick)
                                                @Html.Label("Public Toilet")
                                            </div>
                                            <div id="others">
                                                <div style="color:black">
                                                    @Html.CheckBoxFor(m => m.accomodationselect)
                                                    @Html.Label("Accomodation")

                                                </div>

                                                <div style="color:black">
                                                    @Html.CheckBoxFor(m => m.hairdressingselect)

                                                    @Html.Label("Hairdressing and Beauty Services")

                                                </div>
                                            </div>
                                        </div>

                               
                                        <div class="col-lg-4">
                                            <h6 style="color:black">Plan to go shopping?</h6>
                                            <hr />
                                            <div id="others">
                                                <div style="color:black">
                                                    @Html.CheckBoxFor(m => m.retailselect)
                                                    @Html.Label("Clothing Retailing")

                                                </div>
                                                <div style="color:black">
                                                    @Html.CheckBoxFor(m => m.supermarketselect)
                                                    @Html.Label("Supermarket and Grocery Stores")

                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-4">
                                            <h6 style="color:black">Checking for crowded areas?</h6>
                                            <hr />
                                            <div id="others">
                                                <div>
                                                    @Html.Label("Time :")


                                                    @Html.DropDownListFor(model => model.hour, new SelectList(ViewBag.hours, "Value", "Text"), "Select")
                                                    @Html.ValidationMessageFor(model => model.hour, "", new { @class = "text-danger" })
                                                
                                                    @Html.Label("Day :")
                                                    @Html.DropDownListFor(model => model.day, new SelectList(ViewBag.days, "Value", "Text"), "Select")
                                                    @Html.ValidationMessageFor(model => model.day, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div>


                                    </div>

                                  

                                </div>




                                <button id="mybutton" type="submit" class="btn btn-primary btn-lg btn-block">Search</button>
                            </div>
                        </div>

                        </div>
                    </div>
                    </div>
             





                        <div class="col-md-10">
                            @Html.HiddenFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-10">
                            @Html.HiddenFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
                        </div>





                        <div class="col-md-10">
                            @Html.HiddenFor(model => model.select, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.select, "", new { @class = "text-danger" })
                        </div>




                      




                    
                   


                <div id="content" class="img-responsive"> 
                    <div id="mapid"class="img-responsive">
                        
                            
                      
                    </div>
                    <div class="parent"style="max-width:985px;margin-left:25px">
                        <input type="button" value="Print Result as PDF" class="btn btn-primary btn-lg btn-block" id="pdf"style="width" />
                    </div>
                    <br />
                



                    <br />
                    
                </div>

                <div id="print" style="visibility:visible"> 

                    <div style="background-color:white">
                        @Html.Label("This is a journey planner")
                        <br />
                        @Html.Label("You destination is")
                        @Html.Label("not selected yet", @Model.Address)
                        <br />
                        @Html.Label("The information are locations nearest to  your destination.")
                    </div>
                    <br />

                    <div id="let" style="display:none">
                        <table id="data" font color="#FFFFFF"  class="table">

                            <thead>
                                <tr>


                                    <th>
                                        @Html.Label(" Toilet Address", htmlAttributes: new { @class = "control-label col-md-2" })
                                    </th>
                                    <th>
                                        @Html.Label(" Wheelchair", htmlAttributes: new { @class = "control-label col-md-2" })
                                    </th>
                                    <th>
                                        @Html.Label(" Male", htmlAttributes: new { @class = "control-label col-md-2" })
                                    </th>
                                    <th>
                                        @Html.Label(" Female", htmlAttributes: new { @class = "control-label col-md-2" })
                                    </th>

                                    <th>
                                        @Html.Label("Distance(Meters)", htmlAttributes: new { @class = "control-label col-md-2" })
                                    </th>

                                    <th></th>

                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var element in Model.sorttoilets)
                                {
                                    <tr>
                                        <td>
                                            @Html.DisplayFor(m => element.address)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(m => element.wheelchair)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(m => element.male)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(m => element.female)
                                        </td>

                                        <td>
                                            @Html.DisplayFor(m => element.distance)
                                        </td>


                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div id="train" style="display:none">
                        <table id="data2" font color="#FFFFFF" class="table">

                            <thead>
                                <tr>


                                    <th>
                                        @Html.Label("Station", htmlAttributes: new { @class = "control-label col-md-2" })
                                    </th>
                                    <th>
                                        @Html.Label("Lift Present", htmlAttributes: new { @class = "control-label col-md-2" })
                                    </th>
                                    <th>
                                        @Html.Label("Distance(Meters)", htmlAttributes: new { @class = "control-label col-md-2" })
                                    </th>

                                    <th></th>

                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var element in Model.sorttrains)
                                {
                                    <tr>
                                        <td>
                                            @Html.DisplayFor(m => element.name)
                                        </td>

                                        <td>
                                            @Html.DisplayFor(m => element.lift)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(m => element.distance)
                                        </td>


                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div id="b1" style="display:none">
                        <table id="data3" font color="#FFFFFF"  class="table">

                            <thead>
                                <tr>

                                    <th>
                                        @Html.Label("Trade Name", htmlAttributes: new { @class = "control-label col-md-2" })
                                    </th>
                                    <th>
                                        @Html.Label("Industry Description", htmlAttributes: new { @class = "control-label col-md-2" })
                                    </th>
                                    <th>
                                        @Html.Label("Accessibility Description", htmlAttributes: new { @class = "control-label col-md-2" })
                                    </th>
                                    <th>
                                        @Html.Label("Establishment Address", htmlAttributes: new { @class = "control-label col-md-2" })
                                    </th>





                                    <th>
                                        @Html.Label("Distance(Meters)", htmlAttributes: new { @class = "control-label col-md-2" })
                                    </th>

                                    <th></th>

                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var element in Model.sortbuildings)
                                {
                                    <tr>
                                        <td>
                                            @Html.DisplayFor(m => element.type)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(m => element.industrydesc)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(m => element.accessdesc)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(m => element.address)
                                        </td>







                                        <td>
                                            @Html.DisplayFor(m => element.distance)
                                        </td>


                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div id="car" style="display:none">
                        <table id="data4" font color="#FFFFFF"  class="table">

                            <thead>
                                <tr>


                                    <th>
                                        @Html.Label("Parking BayId", htmlAttributes: new { @class = "control-label col-md-2" })
                                    </th>
                                    <th>
                                        @Html.Label("Distance(Meters)", htmlAttributes: new { @class = "control-label col-md-2" })
                                    </th>


                                    <th></th>

                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var element in Model.sortparkingspots)
                                {
                                    <tr>
                                        <td>
                                            @Html.DisplayFor(m => element.id)
                                        </td>


                                        <td>
                                            @Html.DisplayFor(m => element.distance)
                                        </td>


                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                @*<div class="container" style="margin-left:40px" id="data">
                        <ul class="list-group">
                            @foreach (var element in Model.sorttoilets)
                        {
                                <li class="list-group-item">@Html.DisplayFor(m => element.name)<span class="badge">@Html.DisplayFor(m => element.distance) meters</span></li>
                            }

                        </ul>
                    </div>*@

             



            }

        </div>
    </div>


</body>






@section Scripts {
    @Scripts.Render("~/Scripts/jquery.js")
    @Scripts.Render("https://maps.googleapis.com/maps/api/js?key=AIzaSyCF8dUfrXUwf5-fqeBOTJNPBw4iYYsI_bk&sensor=false&libraries=places")
    @Scripts.Render("~/Scripts/autoapi.js")
    @Scripts.Render("https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.js")
    @Scripts.Render("https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.2/jspdf.min.js")
    @Scripts.Render("https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/2.3.2/jspdf.plugin.autotable.js")
    @Scripts.Render("~/Scripts/pdfprint.js")
    @Scripts.Render("~/Scripts/refresh.js")
    @Scripts.Render("~/Scripts/pace.js")
    @Scripts.Render("~/Scripts/leaflet.js")
   @Scripts.Render("https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js")
    <script>
        var lat = JSON.parse('@Html.Raw(Json.Encode(@Model.Latitude))');
        var lon = JSON.parse('@Html.Raw(Json.Encode(@Model.Longitude))');

        var address = JSON.parse('@Html.Raw(Json.Encode(@Model.Address))');
        if (address == null || address == "") {
            lat = -37.8136;
            lon = 144.9631;
        }
        var mymap = L.map('mapid').setView([lat, lon], 15);
        L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1Ijoic2hpbmlnYW1pZXgiLCJhIjoiY2pnaXZhcG81MDJjMTJxcWpnc3VpajI5bCJ9.N5t4GjexNqoKeNtL1JxyUA', {
            attribution: 'Map data &copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://mapbox.com">Mapbox</a>',
            maxZoom: 40,
            id: 'mapbox.streets',
            accessToken: 'your.mapbox.access.token'
        }).addTo(mymap);

  
        var redIcon = new L.Icon({
            iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });



        if (address != null && address != "") {

            var marker2 = L.marker([lat, lon], { icon: redIcon }).addTo(mymap);
        }

        marker2.bindPopup("Your Destination" + '<br>' + "Address : " + address).openPopup();


        var toilets = JSON.parse('@Html.Raw(Json.Encode(@Model.sorttoilets))');

        var yellowIcon = new L.Icon({
            iconUrl: '/Content/images/man-sitting-on-the-toilet.png',

            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });
        for (var i = 0; i < toilets.length; i++) {

            var marker = L.marker([toilets[i].latitude, toilets[i].longitude], { icon: yellowIcon }).addTo(mymap);

            marker.bindPopup("Public Toilet" + '<br>' + "Wheelchair Access: " + toilets[i].wheelchair + '<br>' + "Address : " + toilets[i].address + '<br>' + "Distance: " + toilets[i].distance + " meters").openPopup();
        }

        var buildings = JSON.parse('@Html.Raw(Json.Encode(@Model.sortbuildings))');

        var beer = new L.Icon({
            iconUrl: '/Content/images/beer.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        var cafe = new L.Icon({
            iconUrl: '/Content/images/hamburger.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });
        var hair = new L.Icon({
            iconUrl: '/Content/images/hair-dryer.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });
        var clothes = new L.Icon({
            iconUrl: '/Content/images/clothes.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });
        var grocery = new L.Icon({
            iconUrl: '/Content/images/groceries.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });
        var accommodation = new L.Icon({
            iconUrl: '/Content/images/accomodation.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });
        for (var i = 0; i < buildings.length; i++) {
            if (buildings[i].industrydesc == "Hairdressing and Beauty Services") {
                var marker = L.marker([buildings[i].lat, buildings[i].lon], { icon: hair }).addTo(mymap);


                marker.bindPopup("Establishment" + '<br>' + "Name : " + buildings[i].type + '<br>' + "Address : " + buildings[i].address + '<br>' + "Accessibility: " + buildings[i].accessdesc + '<br>' + "Distance: " + buildings[i].distance + " meters").openPopup();
            }
            if (buildings[i].industrydesc == "Cafes and Restaurants") {
                var marker = L.marker([buildings[i].lat, buildings[i].lon], { icon: cafe }).addTo(mymap);


                marker.bindPopup("Establishment" + '<br>' + "Name : " + buildings[i].type + '<br>' + "Address : " + buildings[i].address + '<br>' + "Accessibility: " + buildings[i].accessdesc + '<br>' + "Distance: " + buildings[i].distance + " meters").openPopup();
            }
            if (buildings[i].industrydesc == "Pubs, Taverns and Bars") {
                var marker = L.marker([buildings[i].lat, buildings[i].lon], { icon: beer }).addTo(mymap);


                marker.bindPopup("Establishment" + '<br>' + "Name : " + buildings[i].type + '<br>' + "Address : " + buildings[i].address + '<br>' + "Accessibility: " + buildings[i].accessdesc + '<br>' + "Distance: " + buildings[i].distance + " meters").openPopup();
            }
            if (buildings[i].industrydesc == "Clothing Retailing") {
                var marker = L.marker([buildings[i].lat, buildings[i].lon], { icon: clothes }).addTo(mymap);


                marker.bindPopup("Establishment" + '<br>' + "Name : " + buildings[i].type + '<br>' + "Address : " + buildings[i].address + '<br>' + "Accessibility: " + buildings[i].accessdesc + '<br>' + "Distance: " + buildings[i].distance + " meters").openPopup();
            }
        
        if (buildings[i].industrydesc == "Supermarket and Grocery Stores") {
            var marker = L.marker([buildings[i].lat, buildings[i].lon], { icon: grocery }).addTo(mymap);


            marker.bindPopup("Establishment" + '<br>' + "Name : " + buildings[i].type + '<br>' + "Address : " + buildings[i].address + '<br>' + "Accessibility: " + buildings[i].accessdesc + '<br>' + "Distance: " + buildings[i].distance + " meters").openPopup();
        }
        if (buildings[i].industrydesc == "Accommodation") {
            var marker = L.marker([buildings[i].lat, buildings[i].lon], { icon: accommodation }).addTo(mymap);


            marker.bindPopup("Establishment" + '<br>' + "Name : " + buildings[i].type + '<br>' + "Address : " + buildings[i].address + '<br>' + "Accessibility: " + buildings[i].accessdesc + '<br>' + "Distance: " + buildings[i].distance + " meters").openPopup();
        }
        }
        


        var stations = JSON.parse('@Html.Raw(Json.Encode(@Model.sorttrains))');


        var train = new L.Icon({
            iconUrl: '/Content/images/train-station.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });


        for (var i = 0; i < stations.length; i++) {
            var marker = L.marker([stations[i].lat, stations[i].lon], { icon: train }).addTo(mymap);


            marker.bindPopup( "Train Station : " + stations[i].name + '<br>' +"Distance: " + stations[i].distance + " meters" ).openPopup();
        }

        var carparks = JSON.parse('@Html.Raw(Json.Encode(@Model.sortparkingspots))');


        var parking = new L.Icon({
            iconUrl: '/Content/images/parking.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        for (var i = 0; i < carparks.length; i++) {
            var marker = L.marker([carparks[i].lat, carparks[i].lon], { icon: parking }).addTo(mymap);

            marker.bindPopup("Parking Bay" +'<br/>'+ "Distance: " + carparks[i].distance+ " meters" + '<br>' + "BayID: " + carparks[i].id).openPopup();
        }

       

        var peds = JSON.parse('@Html.Raw(Json.Encode(@Model.pedestrians))');
        var safe = new L.Icon({
            iconUrl: '/Content/images/pedestrianblue.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });
        var med = new L.Icon({
            iconUrl: '/Content/images/pedestrianyellow.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });
        var high = new L.Icon({
            iconUrl: '/Content/images/pedestrianred.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        for (var i = 0; i < peds.length; i++) {
            if (peds[i].HoursCount < 2000) {
                var marker = L.marker([peds[i].Latitude, peds[i].Longitude], { icon: safe }).addTo(mymap);

                marker.bindPopup("Pedestrian Volume" + '<br>' + peds[i].HoursCount + " people here").openPopup();
            }
            if (peds[i].HoursCount > 1999 && peds[i].HoursCount < 4000) {
                var marker = L.marker([peds[i].Latitude, peds[i].Longitude], { icon: med }).addTo(mymap);

                marker.bindPopup("Pedestrian Volume" + '<br>' + peds[i].HoursCount + " people here").openPopup();
            }
            if (peds[i].HoursCount >3999) {
                var marker = L.marker([peds[i].Latitude, peds[i].Longitude], { icon: high }).addTo(mymap);

                marker.bindPopup("Pedestrian Volume" + '<br>' + peds[i].HoursCount + " people here").openPopup();
            }

        }

        if (toilets.length>1) {
            $('html, body').animate({
                scrollTop: $("#mapid").offset().top
            }, 'slow');
        }
        if (stations.length > 0) {
            $('html, body').animate({
                scrollTop: $("#mapid").offset().top
            }, 'slow');
        }
        if (carparks.length > 1) {
            $('html, body').animate({
                scrollTop: $("#mapid").offset().top
            }, 'slow');
        }
        if (buildings.length > 1) {
            $('html, body').animate({
                scrollTop: $("#mapid").offset().top
            }, 'slow');
        }
        if (peds.length > 0) {
            $('html, body').animate({
                scrollTop: $("#mapid").offset().top
            }, 'slow');
        }
      

    </script>
    }

}